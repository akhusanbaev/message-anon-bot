const moment = require("moment");
const Users = require("./../models/Users");
const Bills = require("./../models/Bills");
const DefaultSettings = require("./../models/DefaultSettings");
const {chooseGenderMale, chooseGenderFemale, goBack, skip, randomPartner, searchByCity, chatRestricted, profile,
  vipAccess, profileEdit, profileVip, vipTryFree, cancelSearch, endDialog, backToMenu, fillGender, fillAge,
  fillCountry, fillTown, fillSearch, doesntMatter, filterBack, fillExit, backRequestsExit, backRequestOpen,
  backRequestReject, backRequestStartChat, backRequestSkip, countryReady, searchByFourParams, support, rules, tryVip
} = require("./buttons");
const {countriesData} = require("./countries");
const {serverUrl} = require("./config");
const {choosingGenderValidator, choosingAgeValidator, choosingAgeIntValidator, choosingCountryValidator,
  choosingTownValidator, unknownMessageHomepageValidator, unknownCommandValidator, wrongAgeFillingValidator,
  sequenceErrorValidator, wrongCountryFillingValidator, backRequestValidator, choosePossibleOptionValidator,
  availableForVipOnlyValidator
} = require("./validators");
module.exports = {
  welcomeMessage: async (msg, user, query) => {
    try {
      if (!msg) {
        return query.edit({text: `–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?`, keyboard: [[chooseGenderMale], [chooseGenderFemale]]});
      }
      await msg.reply({text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${user.user.first_name}</b>!`});
      return msg.reply({text: `–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?`, keyboard: [[chooseGenderMale], [chooseGenderFemale]]});
    } catch (e) {
      console.log(e);
    }
  }, choosingGender: async (msg, user) => {
    try {
      if (!msg.text) return choosingGenderValidator(msg);
      if (msg.text !== chooseGenderMale && msg.text !== chooseGenderFemale) return choosingGenderValidator(msg);
      if (msg.text === chooseGenderMale) await Users.findOneAndUpdate({"user.id": user.user.id}, {gender: "male", "state.on": "age"});
      if (msg.text === chooseGenderFemale) await Users.findOneAndUpdate({"user.id": user.user.id}, {gender: "female", "state.on": "age"});
      return msg.reply({text: `–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?`, keyboard: [[goBack]]});
    } catch (e) {
      console.log(e);
    }
  }, choosingAge: async (msg, user) => {
    try {
      if (!msg.text) return choosingAgeValidator(msg);
      if (msg.text === goBack) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {gender: null, "state.on": "gender"});
        return msg.reply({text: `–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?`, keyboard: [[chooseGenderMale], [chooseGenderFemale]]});
      }
      if (!parseInt(msg.text)) return choosingAgeIntValidator(msg);
      await Users.findOneAndUpdate({"user.id": user.user.id}, {age: parseInt(msg.text), "state.on": "country"});
      return msg.reply({text: `–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É`, keyboard: [...countriesData.map(c => [c]), [goBack]]});
    } catch (e) {
      console.log(e);
    }
  }, choosingCountry: async (msg, user) => {
    try {
      if (!msg.text) return choosingCountryValidator(msg);
      if (msg.text === goBack) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {age: null, "state.on": "age"});
        return msg.reply({text: `–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?`, keyboard: [[goBack]]});
      }
      if (msg.text === countryReady) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "town"});
        return msg.reply({text: `–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:`, keyboard: [[skip], [goBack]]});
      }
      if (msg.text.startsWith("‚ùå ")) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {$pull: {country: msg.text.substring(2, msg.text.length)}});
        user.country.splice(user.country.findIndex(b => b === msg.text.substring(2, msg.text.length)), 1);
        return msg.reply({text: `–í–∞—à–∏ —Å—Ç—Ä–∞–Ω—ã: ${user.country.join(", ")}`, keyboard: [...countriesData.map(c => {if (user.country.includes(c)) return [`‚ùå ${c}`];
          return [c];}), [countryReady], [goBack]]});
      }
      if (!countriesData.includes(msg.text)) return choosingCountryValidator(msg);
      await Users.findOneAndUpdate({"user.id": user.user.id}, {$push: {country: msg.text}, "state.on": "country"});
      user.country.push(msg.text)
      return msg.reply({text: `–í–∞—à–∏ —Å—Ç—Ä–∞–Ω—ã: ${user.country.join(", ")}`, keyboard: [...countriesData.map(c => {
        if (user.country.includes(c)) return [`‚ùå ${c}`]
        return [c];
      }), [countryReady], [goBack]]});
    } catch (e) {
      console.log(e);
    }
  }, choosingTown: async (msg, user) => {
    try {
      if (!msg.text) return choosingTownValidator(msg);
      if (msg.text === goBack) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {country: [], "state.on": "country"});
        return msg.reply({text: `–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É`, keyboard: [...countriesData.map(c => [c]), [goBack]]});
      }
      await Users.findOneAndUpdate({"user.id": user.user.id}, {town: msg.text===skip?null:msg.text, "state.on": "home"});
      return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
    } catch (e) {
      console.log(e);
    }
  }, homepage: async (msg, user) => {
    try {
      if (!msg.text) return unknownMessageHomepageValidator(msg);
      if (user.backRequests.length) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "back-request-read"});
        return msg.reply({text: `–£ –≤–∞—Å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.backRequests.length!==1?"–ª—é–¥–µ–π":"—á–µ–ª–æ–≤–µ–∫–∞"}`, keyboard: [[backRequestOpen], [backRequestReject]]});
      }
      if (msg.text === randomPartner) {
        const firstSearchTry = await Users.findOne({"state.on": "search-random-partner-restricted", gender: {$ne: user.gender}});
        if (firstSearchTry) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: firstSearchTry._id.toString(), totalDialogs: user.totalDialogs+1});
          await Users.findOneAndUpdate({"user.id": firstSearchTry.user.id}, {"state.on": "chat", partner: user._id.toString(), totalDialogs: firstSearchTry.totalDialogs+1});
          await msg.reply({chatId: user.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
          await msg.reply({chatId: firstSearchTry.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
          return;
        }
        const searchResult = await Users.find({"state.on": "search-random-partner", "user.id": {$ne: user.user.id}}).sort("lastAction");
        let partner = searchResult.length?searchResult[0]:null;
        if (!partner) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner"});
          return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
        }
        if (partner.state.gender && partner.state.gender !== user.gender) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner"});
          return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
        }
        if (partner.state.age.length && !partner.state.age.includes(user.age)) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner"});
          return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
        }
        if (partner.state.country.length) {
          let isIncluded = false
          for (let i = 0; i < partner.state.country.length; i++) {
            const c = partner.state.country[i];
            if (user.country.includes(c)) isIncluded = true;
          }
          if (!isIncluded) {
            await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner"});
            return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
          }
        }
        if (partner.state.town && user.town && partner.state.town !== user.town) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner"});
          return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
        }
        if (partner.state.town && !user.town) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner"});
          return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
        }
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: partner._id.toString(), totalDialogs: user.totalDialogs+1});
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "chat", partner: user._id.toString(), totalDialogs: partner.totalDialogs+1});
        await msg.reply({chatId: user.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        await msg.reply({chatId: partner.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        return;
      }
      if (msg.text === searchByCity || msg.text === searchByFourParams) {
        if (!user.vip) return msg.reply({text: `–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, inline_keyboard: [[{text: tryVip, callback_data: "vip-access"}]]});
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner"});
        return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
      }
      if (msg.text === chatRestricted) {
        if (!user.vip) return msg.reply({text: `–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`, inline_keyboard: [[{text: tryVip, callback_data: "vip-access"}]]});
        const searchResult = await Users.find({"state.on": "search-random-partner", gender: user.gender==="male"?"female":"male", "user.id": {$ne: user.user.id}}).sort("lastAction");
        const partner = searchResult.length?searchResult[0]:null;
        if (!partner) {
          if (user.trialSearches === 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner-restricted", trialSearches: 0});
          if (user.trialSearches > 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner-restricted", trialSearches: user.trialSearches-1});
          return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
        }
        if (user.trialSearches === 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: partner._id.toString(), trialSearches: 0, totalDialogs: user.totalDialogs+1});
        if (user.trialSearches > 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: partner._id.toString(), trialSearches: user.trialSearches-1, totalDialogs: user.totalDialogs+1});
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "chat", partner: user._id.toString(), totalDialogs: partner.totalDialogs+1});
        await msg.reply({chatId: user.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        await msg.reply({chatId: partner.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        return;
      }
      if (msg.text === profile) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "profile-page"});
        return msg.reply({text: `üé≠ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n–ü–æ–ª: ${user.gender === "male" ? chooseGenderMale : chooseGenderFemale}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.age}\n–°—Ç—Ä–∞–Ω—ã: ${user.country.join(", ")}\n${user.town ? `–ì–æ—Ä–æ–¥: ${user.town}` : ""}\n\nVIP: ${user.vip ? user.vipUnlimited ? "–î–∞(–Ω–∞–≤—Å–µ–≥–¥–∞)" : user.trialSearches !== 0 ? `${user.trialSearches} –ø—Ä–æ–±–Ω—ã—Ö –≤–∏–ø –ø–æ–∏—Å–∫–æ–≤` : user.vipUntilDate ? moment(user.vipUntilDate).format("MM/DD/YYYY") : "–ù–µ—Ç" : "–ù–µ—Ç"}\n\n–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${user.totalDialogs}\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${user.totalMessages}`, inline_keyboard: [[{text: profileEdit, callback_data: "edit"}], [{text: profileVip, callback_data: "vip"}]]});
      }
      if (msg.text === rules) {
        const settings = await DefaultSettings.findOne();
        return msg.reply({text: settings.rulesText});
      }
      if (msg.text === support) return msg.reply({text: `–ü–æ–º–æ—â—å\n–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—â–∞–π—Å—è –∫ <a href="https://t.me/example">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>.`, inline_keyboard: [[{text: `üì© –ù–∞–ø–∏—Å–∞—Ç—å`, url: "https://t.me/example"}]]})
      if (msg.text === vipAccess || msg.text === "/vip") {
        if (user.vip) return msg.reply({text: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP`});
        const settings = await DefaultSettings.findOne();
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "choose-vip-plan"});
        let buttons = [[{text: `24 —á–∞—Å–∞ ${settings.vipDailyPrice}—Ä`, callback_data: "24h"}], [{text: `7 –¥–Ω–µ–π ${settings.vipWeeklyPrice}—Ä`, callback_data: "7d"}], [{text: `1 –º–µ—Å—è—Ü ${settings.vipMonthlyPrice}—Ä`, callback_data: "1M"}], [{text: `–ù–∞–≤—Å–µ–≥–¥–∞ ${settings.vipForeverPrice}—Ä`, callback_data: "forever"}]];
        if (user.hasFreeTrial) buttons = [[{text: `${vipTryFree}(${settings.freeTrialSearches} –ø–æ–∏—Å–∫–æ–≤)`, callback_data: "try-free"}], ...buttons];
        return msg.reply({text: `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω`, inline_keyboard: buttons});
      }
      if (msg.text === "/start") return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      return msg.reply({text: `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å–Ω–∏–∑—É`});
    } catch (e) {
      console.log(e);
    }
  }, profilePage: async (query, user) => {
    try {
      if (!query.data) return;
      if (query.data === "edit") {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {gender: null, age: null, country: [], town: null, "state.on": "gender"});
        return query.edit({text: `–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?`, keyboard: [[chooseGenderMale], [chooseGenderFemale]]});
      }
      if (query.data === "vip") {
        if (user.vip) return query.edit({text: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP`});
        const settings = await DefaultSettings.findOne();
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "choose-vip-plan"});
        let buttons = [[{text: `24 —á–∞—Å–∞ ${settings.vipDailyPrice}—Ä`, callback_data: "24h"}], [{text: `7 –¥–Ω–µ–π ${settings.vipWeeklyPrice}—Ä`, callback_data: "7d"}], [{text: `1 –º–µ—Å—è—Ü ${settings.vipMonthlyPrice}—Ä`, callback_data: "1M"}], [{text: `–ù–∞–≤—Å–µ–≥–¥–∞ ${settings.vipForeverPrice}—Ä`, callback_data: "forever"}]];
        if (user.hasFreeTrial) buttons = [[{text: `${vipTryFree}(${settings.freeTrialSearches} –ø–æ–∏—Å–∫–æ–≤)`, callback_data: "try-free"}], ...buttons];
        return query.edit({text: `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω`, inline_keyboard: buttons});
      }
    } catch (e) {
      console.log(e);
    }
  }, choosingVipPlan: async (query, user, qiwiApi) => {
    try {
      if (!query.data) return;
      const settings = await DefaultSettings.findOne();
      if (query.data === "try-free") {
        if (!user.hasFreeTrial) return query.alert({text: "ERROR"});
        await Users.findOneAndUpdate({"user.id": user.user.id}, {vip: true, trialSearches: settings.freeTrialSearches, hasFreeTrial: false, "state.on": "home"});
        return query.edit({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      }
      const newBill = new Bills({amount: query.data==="24h"?settings.vipDailyPrice:query.data==="7d"?settings.vipWeeklyPrice:query.data==="1M"?settings.vipMonthlyPrice:settings.vipForeverPrice, account: user._id.toString()});
      await newBill.save();
      const data = await qiwiApi.createBill(newBill._id.toString(), {amount: newBill.amount, currency: 'RUB', comment: 'New purchase from TestMessageAnonBot', expirationDateTime: newBill.expirationDateTime.toISOString(), account: newBill.account, successUrl: `${serverUrl}/invoices`});
      await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "checkout", "state.plan": query.data, "state.billId": newBill._id.toString()});
      return query.edit({text: `–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ ${newBill.amount}—Ä. –°–∏—Å—Ç–µ–º–∞ QIWI. –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç, —Å—Ä–æ–∫ —Å—á–µ—Ç–∞ –∏—Å—Ç–µ—á–µ—Ç`, inline_keyboard: [[{text: `–û–ø–ª–∞—Ç–∏—Ç—å`, url: data.payUrl}]]});
    } catch (e) {
      console.log(e);
    }
  }, choosingChatVipPlanMsg: async (msg, user) => {
    try {
      const partner = await Users.findById(user.partner);
      if (msg.text && msg.text === "/stop" || msg.text === endDialog) {
        let userOptions = {};
        let partnerOptions = {};
        if (user.vip && user.trialSearches === 0) userOptions = {vip: false, lastVipAccess: true};
        if (partner.vip && partner.trialSearches === 0) partnerOptions = {vip: false, lastVipAccess: true};
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "ended-chat", "state.partner": user.partner, partner: null, ...userOptions});
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "ended-chat", "state.partner": partner.partner, partner: null, ...partnerOptions});
        await msg.reply({chatId: user.user.id, text: `–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º\n/next - –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n/back - –≤–µ—Ä–Ω—É—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/report - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–ø–∞–º`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [profile, vipAccess]]});
        await msg.reply({chatId: partner.user.id, text: `–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ–∫–æ–Ω—á–∏–ª –¥–∏–∞–ª–æ–≥ —Å –≤–∞–º–∏\n/next - –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n/back - –≤–µ—Ä–Ω—É—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/report - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–ø–∞–º`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [profile, vipAccess]]});
        return;
      }
      if (msg.text && msg.text === "/vip") {
        if (user.vip) return msg.reply({text: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP`});
        const settings = await DefaultSettings.findOne();
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "choose-chat-vip-plan"});
        let buttons = [[{text: `24 —á–∞—Å–∞ ${settings.vipDailyPrice}—Ä`, callback_data: "24h"}], [{text: `7 –¥–Ω–µ–π ${settings.vipWeeklyPrice}—Ä`, callback_data: "7d"}], [{text: `1 –º–µ—Å—è—Ü ${settings.vipMonthlyPrice}—Ä`, callback_data: "1M"}], [{text: `–ù–∞–≤—Å–µ–≥–¥–∞ ${settings.vipForeverPrice}—Ä`, callback_data: "forever"}]];
        if (user.hasFreeTrial) buttons = [[{text: `${vipTryFree}(${settings.freeTrialSearches} –ø–æ–∏—Å–∫–æ–≤)`, callback_data: "try-free"}], ...buttons];
        return msg.reply({text: `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω`, inline_keyboard: buttons});
      }
      await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", totalMessages: user.totalMessages+1});
      return msg.reply({chatId: partner.user.id, fromChatId: user.user.id, messageId: msg.message_id});
    } catch (e) {
      console.log(e);
    }
  },choosingChatVipPlan: async (query, user, qiwiApi) => {
    try {
      if (!query.data) return;
      const settings = await DefaultSettings.findOne();
      if (user.hasFreeTrial && query.data === "try-free") {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {vip: true, trialSearches: settings.freeTrialSearches, hasFreeTrial: false, "state.on": "chat"});
        return query.edit({text: `–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:`});
      }
      const newBill = new Bills({amount: settings.vipDailyPrice, account: user._id.toString()});
      await newBill.save();
      const data = await qiwiApi.createBill(newBill._id.toString(), {amount: newBill.amount, currency: 'RUB', comment: 'New purchase from TestMessageAnonBot', expirationDateTime: newBill.expirationDateTime.toISOString(), account: newBill.account, successUrl: `${serverUrl}/invoices`});
      await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat-checkout", "state.plan": query.data, "state.billId": newBill._id.toString()});
      return query.edit({text: `–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ ${newBill.amount}—Ä. –°–∏—Å—Ç–µ–º–∞ QIWI. –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç, —Å—Ä–æ–∫ —Å—á–µ—Ç–∞ –∏—Å—Ç–µ—á–µ—Ç`, inline_keyboard: [[{text: `–û–ø–ª–∞—Ç–∏—Ç—å`, url: data.payUrl}]]});
    } catch (e) {
      console.log(e);
    }
  }, randomPartnerPage: async (msg, user) => {
    try {
      if (!msg.text) return unknownCommandValidator(msg);
      if (msg.text === cancelSearch) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home"});
        return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      }
    } catch (e) {
      console.log(e);
    }
  }, randomPartnerRestrictedPage: async (msg, user) => {
    try {
      if (!msg.text) return unknownCommandValidator(msg);
      if (msg.text === cancelSearch) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home",});
        return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      }
    } catch (e) {
      console.log(e);
    }
  }, filterPartnerPage: async (msg, user) => {
    try {
      let fillField = "";
      let params = {};
      if (!msg.text) return unknownCommandValidator(msg);
      if (msg.text === fillExit) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home"});
        return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      }
      if (msg.text === fillSearch) {
        let otherParams = {};
        if (user.state.gender) otherParams.gender = user.state.gender;
        if (user.state.age) otherParams.age = {$in: user.state.age};
        if (user.state.country) otherParams.country = {$in: user.state.country};
        if (user.state.town) otherParams.town = {$regex: user.state.town, $options: "i"};
        const searchResult = await Users.find({"state.on": "search-random-partner", "user.id": {$ne: user.user.id}, ...otherParams}).sort("lastAction");
        const partner = searchResult.length?searchResult[0]:null;
        if (!partner) {
          if (user.trialSearches === 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner", trialSearches: 0});
          if (user.trialSearches > 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner", trialSearches: user.trialSearches-1});
          return msg.reply({text: `üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...`, keyboard: [[cancelSearch]]});
        }
        if (user.trialSearches === 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: partner._id.toString(), trialSearches: 0, totalDialogs: user.totalDialogs+1});
        if (user.trialSearches > 1) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: partner._id.toString(), trialSearches: user.trialSearches-1, totalDialogs: user.totalDialogs+1});
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "chat", partner: user._id.toString(), totalDialogs: partner.totalDialogs+1});
        await msg.reply({chatId: user.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        await msg.reply({chatId: partner.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        return;
      }
      if (msg.text !== fillGender && msg.text !== fillAge && msg.text !== fillCountry && msg.text !== fillTown) return choosePossibleOptionValidator(msg);
      if (msg.text === fillGender) {
        fillField = "gender";
        params = {text: `–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[chooseGenderMale], [chooseGenderFemale], [doesntMatter], [filterBack]]};
      }
      if (msg.text === fillAge) {
        fillField = "age";
        params = {text: `–ó–∞–¥–∞–π—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 18-20, –ª–∏–±–æ 18`, keyboard: [[doesntMatter], [filterBack]]};
      }
      if (msg.text === fillCountry) {
        fillField = "country";
        params = {text: `–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:`, keyboard: [...countriesData.map(c => {if (user.state.country && user.state.country.length && user.state.country.includes(c)) return [`‚ùå ${c}`];
          return [c];}), [doesntMatter], [filterBack]]};
      }
      if (msg.text === fillTown) {
        fillField = "town";
        params = {text: `–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:`, keyboard: [[doesntMatter], [filterBack]]};
      }
      await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": `search-filter-partner-fill-${fillField}`});
      return msg.reply(params);
    } catch (e) {
      console.log(e);
    }
  }, filterFillGenderPage: async (msg, user) => {
    try {
      if (!msg.text) return unknownCommandValidator(msg);
      if (msg.text === doesntMatter) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.gender": null, "state.on": "search-filter-partner"});
      if (msg.text === filterBack) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner"});
      if (msg.text === chooseGenderMale) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.gender": "male", "state.on": "search-filter-partner"});
      if (msg.text === chooseGenderFemale) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.gender": "female", "state.on": "search-filter-partner"});
      user = await Users.findOne({"user.id": user.user.id});
      return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
    } catch (e) {
      console.log(e);
    }
  }, filterFillAgePage: async (msg, user) => {
    try {
      if (!msg.text) return unknownCommandValidator(msg);
      if (msg.text === doesntMatter) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.age": [], "state.on": "search-filter-partner"});
        user = await Users.findOne({"user.id": user.user.id});
        return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
      }
      if (msg.text === filterBack) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner"});
        return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
      }
      if (msg.text.trim().startsWith("-")) return wrongAgeFillingValidator(msg);
      if (msg.text.split("-") && msg.text.split("-").length && msg.text.split("-").length === 2) {
        if (!Number(msg.text.split("-")[0])) return wrongAgeFillingValidator(msg);
        if (!Number(msg.text.split("-")[1])) return wrongAgeFillingValidator(msg);
        if (Number(msg.text.split("-")[1]) < Number(msg.text.split("-")[0])) return sequenceErrorValidator(msg);
        if (Number(msg.text.split("-")[1]) === Number(msg.text.split("-")[0])) return wrongAgeFillingValidator(msg);
        let value = [];
        for (let i = msg.text.split("-").map(v => Number(v))[0]; i <= msg.text.split("-").map(v => Number(v))[1]; i++) {value = [...value, i];}
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner", "state.age": value});
        user = await Users.findOne({"user.id": user.user.id});
        return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
      }
      if (!Number(msg.text)) return wrongAgeFillingValidator(msg);
      await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner", "state.age": [Number(msg.text)]});
      user = await Users.findOne({"user.id": user.user.id});
      return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
    } catch (e) {
      console.log(e);
    }
  }, filterFillCountryPage: async (msg, user) => {
    try {
      if (!msg.text) return wrongCountryFillingValidator(msg);
      if (msg.text === doesntMatter) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.country": [], "state.on": "search-filter-partner"});
      if (msg.text === filterBack) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner"});
      if (msg.text.startsWith("‚ùå ")) await Users.findOneAndUpdate({"user.id": user.user.id}, {$pull: {"state.country": msg.text.substring(2, msg.text.length)}, "state.on": "search-filter-partner"});
      if (countriesData.includes(msg.text)) await Users.findOneAndUpdate({"user.id": user.user.id}, {$push: {"state.country": msg.text}, "state.on": "search-filter-partner"});
      user = await Users.findOne({"user.id": user.user.id});
      return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
    } catch (e) {
      console.log(e);
    }
  }, filterFillTownPage: async (msg, user) => {
    try {
      if (!msg.text) return choosingTownValidator(msg);
      if (msg.text === doesntMatter) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.town": null, "state.on": "search-filter-partner"});
      if (msg.text === filterBack) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner"});
      if (msg.text !== doesntMatter && msg.text !== filterBack) await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-filter-partner", "state.town": msg.text});
      user = await Users.findOne({"user.id": user.user.id});
      return msg.reply({text: `–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n–ü–æ–ª: ${user.state.gender?user.state.gender==="male"?"–ú—É–∂—Å–∫–æ–π":"–ñ–µ–Ω—Å–∫–∏–π":"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–í–æ–∑—Ä–∞—Å—Ç: ${user.state.age || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–°—Ç—Ä–∞–Ω–∞: ${user.state.country.length?user.state.country.join(", "):"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}\n–ì–æ—Ä–æ–¥: ${user.state.town || "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"}`, keyboard: [[fillSearch], [fillGender], [fillAge], [fillCountry], [fillTown], [fillExit]]});
    } catch (e) {
      console.log(e);
    }
  }, chatPage: async (msg, user) => {
    try {
      const partner = await Users.findById(user.partner);
      if (msg.text && msg.text === "/stop" || msg.text === endDialog) {
        let userOptions = {};
        let partnerOptions = {};
        if (user.vip && user.trialSearches === 0) userOptions = {vip: false, lastVipAccess: true};
        if (partner.vip && partner.trialSearches === 0) partnerOptions = {vip: false, lastVipAccess: true};
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "ended-chat", "state.partner": user.partner, partner: null, ...userOptions});
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "ended-chat", "state.partner": partner.partner, partner: null, ...partnerOptions});
        await msg.reply({chatId: user.user.id, text: `–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º\n/next - –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n/back - –≤–µ—Ä–Ω—É—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/report - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–ø–∞–º`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
        await msg.reply({chatId: partner.user.id, text: `–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ–∫–æ–Ω—á–∏–ª –¥–∏–∞–ª–æ–≥ —Å –≤–∞–º–∏\n/next - –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n/back - –≤–µ—Ä–Ω—É—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/report - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–ø–∞–º`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
        return;
      }
      if (msg.text && msg.text === "/vip") {
        if (user.vip) return msg.reply({text: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP`});
        const settings = await DefaultSettings.findOne();
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "choose-chat-vip-plan"});
        let buttons = [[{text: `24 —á–∞—Å–∞ ${settings.vipDailyPrice}—Ä`, callback_data: "24h"}], [{text: `7 –¥–Ω–µ–π ${settings.vipWeeklyPrice}—Ä`, callback_data: "7d"}], [{text: `1 –º–µ—Å—è—Ü ${settings.vipMonthlyPrice}—Ä`, callback_data: "1M"}], [{text: `–ù–∞–≤—Å–µ–≥–¥–∞ ${settings.vipForeverPrice}—Ä`, callback_data: "forever"}]];
        if (user.hasFreeTrial) buttons = [[{text: `${vipTryFree}(${settings.freeTrialSearches} –ø–æ–∏—Å–∫–æ–≤)`, callback_data: "try-free"}], ...buttons];
        return msg.reply({text: `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω`, inline_keyboard: buttons});
      }
      await Users.findOneAndUpdate({"user.id": user.user.id}, {totalMessages: user.totalMessages+1});
      return msg.reply({chatId: partner.user.id, fromChatId: user.user.id, messageId: msg.message_id});
    } catch (e) {
      console.log(e);
    }
  }, endedChatPage: async (msg, user) => {
    try {
      if (!msg.text) return unknownMessageHomepageValidator(msg);
      if (user.backRequests.length) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "back-request-read", lastVipAccess: false});
        return msg.reply({text: `–£ –≤–∞—Å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.backRequests.length!==1?"–ª—é–¥–µ–π":"—á–µ–ª–æ–≤–µ–∫–∞"}`, keyboard: [[backRequestOpen], [backRequestReject]]});
      }
      if (msg.text === "/report") {
        const partner = await Users.findById(user.state.partner);
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {reportsCount: partner.reportsCount+1});
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home", "state.partner": null});
        return msg.reply({text: `–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏`});
      }
      if (msg.text === "/back") {
        if (!user.vip && !user.lastVipAccess) return availableForVipOnlyValidator(msg);
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "back-request", lastVipAccess: false});
        return msg.reply({text: `–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª, –∫—Ç–æ –µ–≥–æ –æ–ø—Ä–∞–≤–∏–ª.\n\n–ü—Ä–∏–º–µ—Ä:\n–ø—Ä–∏–≤–µ—Ç, —è –û–ª–µ–≥ 22 –≥–æ–¥–∞, —Å–ª—É—á–∞–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º?`, keyboard: [[backToMenu]]});
      }
      if (msg.text === "/next") {
        const searchResult = await Users.find({"state.on": "search-random-partner", "user.id": {$ne: user.user.id}, "state.gender": {$exists: true, $in: [user.gender]}, "state.age": {$exists: true, $in: [user.age]}, "state.country": {$exists: true, $in: user.country}, "state.town": {$exists: true, $in: [user.town]}}).sort("lastAction");
        const partner = searchResult.length?searchResult[0]:null;
        if (!partner) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "search-random-partner", lastVipAccess: false});
          return msg.reply({text: `–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞`, keyboard: [[cancelSearch]]});
        }
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: partner._id.toString(), lastVipAccess: false});
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "chat", partner: user._id.toString()});
        await msg.reply({chatId: user.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        await msg.reply({chatId: partner.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        return;
      }
      return true;
    } catch (e) {
      console.log(e);
    }
  }, backRequestPage: async (msg, user) => {
    try {
      if (!msg.text) return backRequestValidator(msg);
      const partner = await Users.findById(user.state.partner);
      if (msg.text === backToMenu) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home", "state.partner": null});
        return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      }
      await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "back-request-waiting", "state.user": partner._id.toString()});
      await Users.findOneAndUpdate({"user.id": partner.user.id}, {$push: {backRequests: {date: moment().toDate(), from: user._id.toString(), content: msg.text}}});
      if (partner.state.on !== "chat" && partner.state.on !== "back-request" && partner.state.on !== "search-filter-partner-fill-town" && partner.state.on !== "search-filter-partner-fill-country" && partner.state.on !== "search-filter-partner-fill-age" && partner.state.on !== "search-filter-partner-fill-gender" && partner.state.on !== "search-filter-partner" && partner.state.on !== "gender" && partner.state.on !== "age" && partner.state.on !== "country" && partner.state.on !== "town") {
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "back-request-read"});
        await msg.reply({chatId: partner.user.id, text: `–£ –≤–∞—Å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.backRequests.length} –ª—é–¥–µ–π`, keyboard: [[backRequestOpen], [backRequestReject]]});
      }
      return msg.reply({text: `–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é(–ï—Å–ª–∏ –≤—ã –≤—ã–π–¥–µ—Ç–µ –æ—Ç—Å—é–¥–∞ –∑–∞–ø—Ä–æ—Å –∏—Å—á–µ–∑–Ω–µ—Ç!)`, keyboard: [[backRequestsExit]]});
    } catch (e) {
      console.log(e);
    }
  }, backRequestWaitingPage: async (msg, user) => {
    try {
      if (!msg.text) return unknownMessageHomepageValidator(msg);
      const partner = await Users.findById(user.state.user);
      if (msg.text === backRequestsExit) {
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {$pull: {backRequests: {from: user._id.toString()}}});
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home", "state.plan": null, "state.billId": null, "state.gender": null, "state.age": [], "state.country": [], "state.town": null, "state.user": null, "state.partner": null});
        return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      }
    } catch (e) {
      console.log(e);
    }
  }, backRequestReadingPage: async (msg, user) => {
    try {
      if (!msg.text) return choosePossibleOptionValidator(msg);
      if (msg.text === backRequestOpen) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "back-request-see-requests"});
        return msg.reply({text: `${user.backRequests[0].content}`, keyboard: [[backRequestStartChat], [backRequestSkip]]});
      }
      if (msg.text === backRequestReject) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {$set: {backRequests: []}, "state.on": "home", "state.plan": null, "state.billId": null, "state.gender": null, "state.age": [], "state.country": [], "state.town": null, "state.user": null, "state.partner": null});
        return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
      }
    } catch (e) {
      console.log(e);
    }
  }, backRequestSeePage: async (msg, user) => {
    try {
      if (!msg.text) return choosePossibleOptionValidator(msg);
      const partner = await Users.findById(user.backRequests[0].from);
      if (msg.text === backRequestStartChat) {
        if (partner.state.on !== "back-request-waiting") {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "back-request-see-requests", $pull: {backRequests: {from: user.backRequests[0].from}}});
          await msg.reply({text: `–ü–æ–∫–∞ –≤—ã –¥—É–º–∞–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ–¥—É–º–∞–ª –æ–±—â–∞—Ç—å—Å—è`});
          if (user.backRequests.length === 1) {
            await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home", "state.plan": null, "state.billId": null, "state.gender": null, "state.age": [], "state.country": [], "state.town": null, "state.user": null, "state.partner": null});
            return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
          }
          return msg.reply({text: `${user.backRequests[1].content}`, keyboard: [[backRequestStartChat], [backRequestSkip]]});
        }
        await Users.findOneAndUpdate({"user.id": partner.user.id}, {"state.on": "chat", partner: user._id.toString(), "state.user": null});
        await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "chat", partner: user.backRequests[0].from, $pull: {backRequests: {from: user.backRequests[0].from}}});
        await msg.reply({chatId: user.user.id, text: `–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        await msg.reply({chatId: partner.user.id, text: `–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. \n/stop - –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/vip - –ü–æ–ª—É—á–∏—Ç—å VIP`, keyboard: [[endDialog]]});
        return;
      }
      if (msg.text === backRequestSkip) {
        await Users.findOneAndUpdate({"user.id": user.user.id}, {$pull: {backRequests: {from: user.backRequests[0].from}}});
        if (user.backRequests.length === 1) {
          await Users.findOneAndUpdate({"user.id": user.user.id}, {"state.on": "home", "state.plan": null, "state.billId": null, "state.gender": null, "state.age": [], "state.country": [], "state.town": null, "state.user": null, "state.partner": null});
          return msg.reply({text: `‚ö°Ô∏è–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`, keyboard: [[randomPartner], [searchByCity, chatRestricted], [searchByFourParams], [profile, vipAccess], [support, rules]]});
        }
        return msg.reply({text: `${user.backRequests[1].content}`, keyboard: [[backRequestStartChat], [backRequestSkip]]});
      }
    } catch (e) {
      console.log(e);
    }
  },
}
